pipeline {
  agent {
    label 'docker'
  }

  environment {
    GOVERSION = '1.16.2'
    PATH = "${env.WORKSPACE}/go/bin:${env.WORKSPACE}/kind/bin:${env.WORKSPACE}/kubectl/bin:${PATH}"
    K8S_VERSION = 'v1.20.0'
  }

  stages {
    stage('Install tools locally') {
      steps {
        sh 'wget -q -O- https://dl.google.com/go/go${GOVERSION}.linux-amd64.tar.gz | tar xz'
        sh '''
        mkdir -p kind/bin
        curl -Lo kind/bin/kind https://kind.sigs.k8s.io/dl/v0.9.0/kind-linux-amd64
        chmod +x kind/bin/kind
        '''
        sh '''
        mkdir -p kubectl/bin
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        mv ./kubectl kubectl/bin/kubectl
        '''
      }
    }

    stage('Use Kind') {
      steps {
        sh 'kind create cluster --name test_${env.K8S_VERSION} --image kindest/node:${env.K8S_VERSION} --kubeconfig kubeconfig.${env.K8S_VERSION}'
        sh 'kubectl --kubeconfig kubeconfig.${env.K8S_VERSION} cluster-info'
        sh '''
            export KUBECONFIG=kubeconfig.${env.K8S_VERSION}

            # Install Helm locally
            wget -q -O- https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
            # Install Grafana, Loki, etc. using Helm
            helm repo add grafana https://grafana.github.io/helm-charts
            kubectl create namespace logging
            helm upgrade --install loki --namespace=logging grafana/loki-stack \
                --set fluent-bit.enabled=true,promtail.enabled=false,grafana.enabled=true,prometheus.enabled=true,prometheus.alertmanager.persistentVolume.enabled=false,prometheus.server.persistentVolume.enabled=false

            # Wait for deployment to complete
            echo "Waiting for Grafana to start up..."
            until kubectl rollout status -n logging deployment/loki-grafana; do
                echo -n '.'
                sleep 2
            done
            echo "Grafana running"

            kubectl get pods --all-namespaces
        '''
      }
      post {
        always {
            sh 'kind delete cluster --name test_${env.K8S_VERSION}'
        }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}